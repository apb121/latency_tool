===== Function group analysis =====

The following groups of functions have been identified as potential sources of latency problems.
They have been ranked based on a combination of the number of functions in the group and the amount of cache space they compete for.
This has been calculated based on the instruction-cache's critical stride of 4096 bytes and associativity of 8, as well as a coexecution indirection level of 1 and competition overlap threshold of 1 bytes.

=== Group ===

function_1()
function_5()
function_9()
function_13()
function_17()
function_21()
function_25()
function_29()
main

These 9 coexecuting functions call each other (directly) 8 times and compete for the same 46-byte region of the cache

=== Group ===

function_5()
function_9()
function_13()
function_17()
function_21()
function_25()
function_29()
main

These 8 coexecuting functions call each other (directly) 7 times and compete for the same 46-byte region of the cache

=== Group ===

function_1()
function_9()
function_13()
function_17()
function_21()
function_25()
function_29()
main

These 8 coexecuting functions call each other (directly) 7 times and compete for the same 46-byte region of the cache

=== Group ===

function_1()
function_5()
function_13()
function_17()
function_21()
function_25()
function_29()
main

These 8 coexecuting functions call each other (directly) 7 times and compete for the same 46-byte region of the cache

=== Group ===

function_1()
function_5()
function_9()
function_17()
function_21()
function_25()
function_29()
main

These 8 coexecuting functions call each other (directly) 7 times and compete for the same 46-byte region of the cache

=== Group ===

function_1()
function_5()
function_9()
function_13()
function_21()
function_25()
function_29()
main

These 8 coexecuting functions call each other (directly) 7 times and compete for the same 46-byte region of the cache

=== Group ===

function_1()
function_5()
function_9()
function_13()
function_17()
function_25()
function_29()
main

These 8 coexecuting functions call each other (directly) 7 times and compete for the same 46-byte region of the cache

=== Group ===

function_1()
function_5()
function_9()
function_13()
function_17()
function_21()
function_29()
main

These 8 coexecuting functions call each other (directly) 7 times and compete for the same 46-byte region of the cache

=== Group ===

function_1()
function_5()
function_9()
function_13()
function_17()
function_21()
function_25()
main

These 8 coexecuting functions call each other (directly) 7 times and compete for the same 46-byte region of the cache

=== Group ===

function_9()
function_13()
function_17()
function_21()
function_25()
function_29()
main

These 7 coexecuting functions call each other (directly) 6 times and compete for the same 46-byte region of the cache



===== Description =====

The largest identified group of coexecuting functions that compete for cache space contains 9 functions.

The number of groups whose size is close to or equal to the associativity of the L1 instruction cache is: 534.
Such groups of functions may cause an increase in the standard deviation (jitter) among run-time latencies, because there is a risk of cache evictions.

The number of groups whose size is above the associativity of the L1 instruction cache is: 1.
Such groups of functions are likely to cause an increase in latencies, because they will evict each other from the cache.

The suggestions below may help to mitigate problems that may arise as a result of these functions competing for cache space.