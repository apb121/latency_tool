code stuff

-- source code (class) parser
    -- inherit size from parent classes, increase size by any size of new data members...
    -- (NB regex is equivalent to FSM and therefore can't handle arbitrarily recursive structures that require counting)
    -- (keep virtual in there and discard it)
    -- add template functionality to class/variable search
        -- suggest specialisations?
    -- classes as members of other classes
    -- avoid virtual declarations
    -- many-level recursive array<>s
    -- comma separated lists of variables
-- empirical cache tests
    -- more sophisticated stddev checking for spikes?
-- binary analyser
    -- makefile functionality?
    -- nm function functionality
        -- nm -v -C -l --radix=d --print-size <filename>
            -- only take lines with T
                -- first >>: location; second >> size (with --print-size flag); third >>: type; fourth up to ')' >> name; last: filepath is the last part: .../filename:line_number (with -l flag)
        -- !! combine with class names analyser to find user defined functions
        -- which functions call each other
        -- which functions are called near to each other
        -- consider: overloading
    -- objdump -d -C -Mintel --no-show-raw-insn <filename>
    -- better to use objdump for many reasons
        -- a lot of function calls (e.g. to constructors, assignment operators, etc.) are not explicit in source code
-- identify discontiguous data structures

report stuff

--emphasise the difficulty of catching appropriate cases of variable declarations and rejecting inappropriate cases
    -- inline functions
    -- function parameters
    -- complex cases (see notebook)
--try to optimise OOP coursework!