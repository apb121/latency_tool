
associativity_test_i:     file format elf64-x86-64


Disassembly of section .init:

0000000000001000 <_init>:
    1000:	f3 0f 1e fa          	endbr64 
    1004:	48 83 ec 08          	sub    rsp,0x8
    1008:	48 8b 05 d9 2f 00 00 	mov    rax,QWORD PTR [rip+0x2fd9]        # 3fe8 <__gmon_start__>
    100f:	48 85 c0             	test   rax,rax
    1012:	74 02                	je     1016 <_init+0x16>
    1014:	ff d0                	call   rax
    1016:	48 83 c4 08          	add    rsp,0x8
    101a:	c3                   	ret    

Disassembly of section .plt:

0000000000001020 <.plt>:
    1020:	ff 35 5a 2f 00 00    	push   QWORD PTR [rip+0x2f5a]        # 3f80 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	f2 ff 25 5b 2f 00 00 	bnd jmp QWORD PTR [rip+0x2f5b]        # 3f88 <_GLOBAL_OFFSET_TABLE_+0x10>
    102d:	0f 1f 00             	nop    DWORD PTR [rax]
    1030:	f3 0f 1e fa          	endbr64 
    1034:	68 00 00 00 00       	push   0x0
    1039:	f2 e9 e1 ff ff ff    	bnd jmp 1020 <.plt>
    103f:	90                   	nop
    1040:	f3 0f 1e fa          	endbr64 
    1044:	68 01 00 00 00       	push   0x1
    1049:	f2 e9 d1 ff ff ff    	bnd jmp 1020 <.plt>
    104f:	90                   	nop
    1050:	f3 0f 1e fa          	endbr64 
    1054:	68 02 00 00 00       	push   0x2
    1059:	f2 e9 c1 ff ff ff    	bnd jmp 1020 <.plt>
    105f:	90                   	nop
    1060:	f3 0f 1e fa          	endbr64 
    1064:	68 03 00 00 00       	push   0x3
    1069:	f2 e9 b1 ff ff ff    	bnd jmp 1020 <.plt>
    106f:	90                   	nop
    1070:	f3 0f 1e fa          	endbr64 
    1074:	68 04 00 00 00       	push   0x4
    1079:	f2 e9 a1 ff ff ff    	bnd jmp 1020 <.plt>
    107f:	90                   	nop
    1080:	f3 0f 1e fa          	endbr64 
    1084:	68 05 00 00 00       	push   0x5
    1089:	f2 e9 91 ff ff ff    	bnd jmp 1020 <.plt>
    108f:	90                   	nop
    1090:	f3 0f 1e fa          	endbr64 
    1094:	68 06 00 00 00       	push   0x6
    1099:	f2 e9 81 ff ff ff    	bnd jmp 1020 <.plt>
    109f:	90                   	nop

Disassembly of section .plt.got:

00000000000010a0 <__cxa_finalize@plt>:
    10a0:	f3 0f 1e fa          	endbr64 
    10a4:	f2 ff 25 1d 2f 00 00 	bnd jmp QWORD PTR [rip+0x2f1d]        # 3fc8 <__cxa_finalize@GLIBC_2.2.5>
    10ab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .plt.sec:

00000000000010b0 <std::__throw_bad_function_call()@plt>:
    10b0:	f3 0f 1e fa          	endbr64 
    10b4:	f2 ff 25 d5 2e 00 00 	bnd jmp QWORD PTR [rip+0x2ed5]        # 3f90 <std::__throw_bad_function_call()@GLIBCXX_3.4.14>
    10bb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000010c0 <__cxa_atexit@plt>:
    10c0:	f3 0f 1e fa          	endbr64 
    10c4:	f2 ff 25 cd 2e 00 00 	bnd jmp QWORD PTR [rip+0x2ecd]        # 3f98 <__cxa_atexit@GLIBC_2.2.5>
    10cb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000010d0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>:
    10d0:	f3 0f 1e fa          	endbr64 
    10d4:	f2 ff 25 c5 2e 00 00 	bnd jmp QWORD PTR [rip+0x2ec5]        # 3fa0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@GLIBCXX_3.4>
    10db:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000010e0 <__stack_chk_fail@plt>:
    10e0:	f3 0f 1e fa          	endbr64 
    10e4:	f2 ff 25 bd 2e 00 00 	bnd jmp QWORD PTR [rip+0x2ebd]        # 3fa8 <__stack_chk_fail@GLIBC_2.4>
    10eb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000010f0 <std::ios_base::Init::Init()@plt>:
    10f0:	f3 0f 1e fa          	endbr64 
    10f4:	f2 ff 25 b5 2e 00 00 	bnd jmp QWORD PTR [rip+0x2eb5]        # 3fb0 <std::ios_base::Init::Init()@GLIBCXX_3.4>
    10fb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001100 <std::ostream::operator<<(int)@plt>:
    1100:	f3 0f 1e fa          	endbr64 
    1104:	f2 ff 25 ad 2e 00 00 	bnd jmp QWORD PTR [rip+0x2ead]        # 3fb8 <std::ostream::operator<<(int)@GLIBCXX_3.4>
    110b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001110 <_Unwind_Resume@plt>:
    1110:	f3 0f 1e fa          	endbr64 
    1114:	f2 ff 25 a5 2e 00 00 	bnd jmp QWORD PTR [rip+0x2ea5]        # 3fc0 <_Unwind_Resume@GCC_3.0>
    111b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .text:

0000000000001120 <_start>:
    1120:	f3 0f 1e fa          	endbr64 
    1124:	31 ed                	xor    ebp,ebp
    1126:	49 89 d1             	mov    r9,rdx
    1129:	5e                   	pop    rsi
    112a:	48 89 e2             	mov    rdx,rsp
    112d:	48 83 e4 f0          	and    rsp,0xfffffffffffffff0
    1131:	50                   	push   rax
    1132:	54                   	push   rsp
    1133:	4c 8d 05 56 0a 00 00 	lea    r8,[rip+0xa56]        # 1b90 <__libc_csu_fini>
    113a:	48 8d 0d df 09 00 00 	lea    rcx,[rip+0x9df]        # 1b20 <__libc_csu_init>
    1141:	48 8d 3d 15 01 00 00 	lea    rdi,[rip+0x115]        # 125d <main>
    1148:	ff 15 92 2e 00 00    	call   QWORD PTR [rip+0x2e92]        # 3fe0 <__libc_start_main@GLIBC_2.2.5>
    114e:	f4                   	hlt    
    114f:	90                   	nop

0000000000001150 <deregister_tm_clones>:
    1150:	48 8d 3d c1 2e 00 00 	lea    rdi,[rip+0x2ec1]        # 4018 <__TMC_END__>
    1157:	48 8d 05 ba 2e 00 00 	lea    rax,[rip+0x2eba]        # 4018 <__TMC_END__>
    115e:	48 39 f8             	cmp    rax,rdi
    1161:	74 15                	je     1178 <deregister_tm_clones+0x28>
    1163:	48 8b 05 6e 2e 00 00 	mov    rax,QWORD PTR [rip+0x2e6e]        # 3fd8 <_ITM_deregisterTMCloneTable>
    116a:	48 85 c0             	test   rax,rax
    116d:	74 09                	je     1178 <deregister_tm_clones+0x28>
    116f:	ff e0                	jmp    rax
    1171:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    1178:	c3                   	ret    
    1179:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000001180 <register_tm_clones>:
    1180:	48 8d 3d 91 2e 00 00 	lea    rdi,[rip+0x2e91]        # 4018 <__TMC_END__>
    1187:	48 8d 35 8a 2e 00 00 	lea    rsi,[rip+0x2e8a]        # 4018 <__TMC_END__>
    118e:	48 29 fe             	sub    rsi,rdi
    1191:	48 89 f0             	mov    rax,rsi
    1194:	48 c1 ee 3f          	shr    rsi,0x3f
    1198:	48 c1 f8 03          	sar    rax,0x3
    119c:	48 01 c6             	add    rsi,rax
    119f:	48 d1 fe             	sar    rsi,1
    11a2:	74 14                	je     11b8 <register_tm_clones+0x38>
    11a4:	48 8b 05 45 2e 00 00 	mov    rax,QWORD PTR [rip+0x2e45]        # 3ff0 <_ITM_registerTMCloneTable>
    11ab:	48 85 c0             	test   rax,rax
    11ae:	74 08                	je     11b8 <register_tm_clones+0x38>
    11b0:	ff e0                	jmp    rax
    11b2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    11b8:	c3                   	ret    
    11b9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

00000000000011c0 <__do_global_dtors_aux>:
    11c0:	f3 0f 1e fa          	endbr64 
    11c4:	80 3d 85 2f 00 00 00 	cmp    BYTE PTR [rip+0x2f85],0x0        # 4150 <completed.8061>
    11cb:	75 2b                	jne    11f8 <__do_global_dtors_aux+0x38>
    11cd:	55                   	push   rbp
    11ce:	48 83 3d f2 2d 00 00 	cmp    QWORD PTR [rip+0x2df2],0x0        # 3fc8 <__cxa_finalize@GLIBC_2.2.5>
    11d5:	00 
    11d6:	48 89 e5             	mov    rbp,rsp
    11d9:	74 0c                	je     11e7 <__do_global_dtors_aux+0x27>
    11db:	48 8b 3d 26 2e 00 00 	mov    rdi,QWORD PTR [rip+0x2e26]        # 4008 <__dso_handle>
    11e2:	e8 b9 fe ff ff       	call   10a0 <__cxa_finalize@plt>
    11e7:	e8 64 ff ff ff       	call   1150 <deregister_tm_clones>
    11ec:	c6 05 5d 2f 00 00 01 	mov    BYTE PTR [rip+0x2f5d],0x1        # 4150 <completed.8061>
    11f3:	5d                   	pop    rbp
    11f4:	c3                   	ret    
    11f5:	0f 1f 00             	nop    DWORD PTR [rax]
    11f8:	c3                   	ret    
    11f9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000001200 <frame_dummy>:
    1200:	f3 0f 1e fa          	endbr64 
    1204:	e9 77 ff ff ff       	jmp    1180 <register_tm_clones>

0000000000001209 <function_1()>:
#include <functional>

using namespace std;

void function_1()
{
    1209:	f3 0f 1e fa          	endbr64 
    120d:	55                   	push   rbp
    120e:	48 89 e5             	mov    rbp,rsp
    1211:	48 83 ec 10          	sub    rsp,0x10
    int d;
    for (int i = 0; i < 1000; ++i)
    1215:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
    121c:	81 7d fc e7 03 00 00 	cmp    DWORD PTR [rbp-0x4],0x3e7
    1223:	7f 0f                	jg     1234 <function_1()+0x2b>
    {
        d = i + 1;
    1225:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    1228:	83 c0 01             	add    eax,0x1
    122b:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    for (int i = 0; i < 1000; ++i)
    122e:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
    1232:	eb e8                	jmp    121c <function_1()+0x13>
    }
    cout << d << endl;
    1234:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    1237:	89 c6                	mov    esi,eax
    1239:	48 8d 3d 00 2e 00 00 	lea    rdi,[rip+0x2e00]        # 4040 <std::cout@@GLIBCXX_3.4>
    1240:	e8 bb fe ff ff       	call   1100 <std::ostream::operator<<(int)@plt>
    1245:	48 89 c2             	mov    rdx,rax
    1248:	48 8b 05 81 2d 00 00 	mov    rax,QWORD PTR [rip+0x2d81]        # 3fd0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
    124f:	48 89 c6             	mov    rsi,rax
    1252:	48 89 d7             	mov    rdi,rdx
    1255:	e8 76 fe ff ff       	call   10d0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
}
    125a:	90                   	nop
    125b:	c9                   	leave  
    125c:	c3                   	ret    

000000000000125d <main>:

int main()
{
    125d:	f3 0f 1e fa          	endbr64 
    1261:	55                   	push   rbp
    1262:	48 89 e5             	mov    rbp,rsp
    1265:	41 54                	push   r12
    1267:	53                   	push   rbx
    1268:	48 81 ec a0 0c 00 00 	sub    rsp,0xca0
    126f:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
    1276:	00 00 
    1278:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    127c:	31 c0                	xor    eax,eax
    function<void()> f[100];
    127e:	48 8d 85 60 f3 ff ff 	lea    rax,[rbp-0xca0]
    1285:	bb 63 00 00 00       	mov    ebx,0x63
    128a:	49 89 c4             	mov    r12,rax
    128d:	48 85 db             	test   rbx,rbx
    1290:	78 12                	js     12a4 <main+0x47>
    1292:	4c 89 e7             	mov    rdi,r12
    1295:	e8 20 02 00 00       	call   14ba <std::function<void ()>::function()>
    129a:	49 83 c4 20          	add    r12,0x20
    129e:	48 83 eb 01          	sub    rbx,0x1
    12a2:	eb e9                	jmp    128d <main+0x30>
    for (int i = 0; i < 100; i++)
    12a4:	c7 85 5c f3 ff ff 00 	mov    DWORD PTR [rbp-0xca4],0x0
    12ab:	00 00 00 
    12ae:	83 bd 5c f3 ff ff 63 	cmp    DWORD PTR [rbp-0xca4],0x63
    12b5:	7f 2f                	jg     12e6 <main+0x89>
    {
        f[i] = function_1;
    12b7:	48 8d 85 60 f3 ff ff 	lea    rax,[rbp-0xca0]
    12be:	8b 95 5c f3 ff ff    	mov    edx,DWORD PTR [rbp-0xca4]
    12c4:	48 63 d2             	movsxd rdx,edx
    12c7:	48 c1 e2 05          	shl    rdx,0x5
    12cb:	48 01 d0             	add    rax,rdx
    12ce:	48 8d 35 34 ff ff ff 	lea    rsi,[rip+0xffffffffffffff34]        # 1209 <function_1()>
    12d5:	48 89 c7             	mov    rdi,rax
    12d8:	e8 fd 01 00 00       	call   14da <std::enable_if<std::function<void ()>::_Callable<std::decay<void (&)()>::type, std::__invoke_result<std::decay<void (&)()>::type&> >::value, std::function<void ()>&>::type std::function<void ()>::operator=<void (&)()>(void (&)())>
    for (int i = 0; i < 100; i++)
    12dd:	83 85 5c f3 ff ff 01 	add    DWORD PTR [rbp-0xca4],0x1
    12e4:	eb c8                	jmp    12ae <main+0x51>
    }
    f[50]();
    12e6:	48 8d 85 60 f3 ff ff 	lea    rax,[rbp-0xca0]
    12ed:	48 05 40 06 00 00    	add    rax,0x640
    12f3:	48 89 c7             	mov    rdi,rax
    12f6:	e8 59 02 00 00       	call   1554 <std::function<void ()>::operator()() const>
    function<void()> f[100];
    12fb:	48 8d 9d 60 f3 ff ff 	lea    rbx,[rbp-0xca0]
    1302:	48 81 c3 80 0c 00 00 	add    rbx,0xc80
    1309:	48 8d 85 60 f3 ff ff 	lea    rax,[rbp-0xca0]
    1310:	48 39 c3             	cmp    rbx,rax
    1313:	74 0e                	je     1323 <main+0xc6>
    1315:	48 83 eb 20          	sub    rbx,0x20
    1319:	48 89 df             	mov    rdi,rbx
    131c:	e8 79 01 00 00       	call   149a <std::function<void ()>::~function()>
    1321:	eb e6                	jmp    1309 <main+0xac>
    1323:	b8 00 00 00 00       	mov    eax,0x0
    1328:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    132c:	64 48 33 0c 25 28 00 	xor    rcx,QWORD PTR fs:0x28
    1333:	00 00 
    1335:	74 41                	je     1378 <main+0x11b>
    1337:	eb 3a                	jmp    1373 <main+0x116>
    1339:	f3 0f 1e fa          	endbr64 
    133d:	49 89 c4             	mov    r12,rax
    function<void()> f[100];
    1340:	48 8d 9d 60 f3 ff ff 	lea    rbx,[rbp-0xca0]
    1347:	48 81 c3 80 0c 00 00 	add    rbx,0xc80
    134e:	48 8d 85 60 f3 ff ff 	lea    rax,[rbp-0xca0]
    1355:	48 39 c3             	cmp    rbx,rax
    1358:	74 0e                	je     1368 <main+0x10b>
    135a:	48 83 eb 20          	sub    rbx,0x20
    135e:	48 89 df             	mov    rdi,rbx
    1361:	e8 34 01 00 00       	call   149a <std::function<void ()>::~function()>
    1366:	eb e6                	jmp    134e <main+0xf1>
    1368:	4c 89 e0             	mov    rax,r12
    136b:	48 89 c7             	mov    rdi,rax
    136e:	e8 9d fd ff ff       	call   1110 <_Unwind_Resume@plt>
    1373:	e8 68 fd ff ff       	call   10e0 <__stack_chk_fail@plt>
    1378:	48 81 c4 a0 0c 00 00 	add    rsp,0xca0
    137f:	5b                   	pop    rbx
    1380:	41 5c                	pop    r12
    1382:	5d                   	pop    rbp
    1383:	c3                   	ret    

0000000000001384 <__static_initialization_and_destruction_0(int, int)>:
    1384:	f3 0f 1e fa          	endbr64 
    1388:	55                   	push   rbp
    1389:	48 89 e5             	mov    rbp,rsp
    138c:	48 83 ec 10          	sub    rsp,0x10
    1390:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    1393:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    1396:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
    139a:	75 32                	jne    13ce <__static_initialization_and_destruction_0(int, int)+0x4a>
    139c:	81 7d f8 ff ff 00 00 	cmp    DWORD PTR [rbp-0x8],0xffff
    13a3:	75 29                	jne    13ce <__static_initialization_and_destruction_0(int, int)+0x4a>
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  ///@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
    13a5:	48 8d 3d a5 2d 00 00 	lea    rdi,[rip+0x2da5]        # 4151 <std::__ioinit>
    13ac:	e8 3f fd ff ff       	call   10f0 <std::ios_base::Init::Init()@plt>
    13b1:	48 8d 15 50 2c 00 00 	lea    rdx,[rip+0x2c50]        # 4008 <__dso_handle>
    13b8:	48 8d 35 92 2d 00 00 	lea    rsi,[rip+0x2d92]        # 4151 <std::__ioinit>
    13bf:	48 8b 05 32 2c 00 00 	mov    rax,QWORD PTR [rip+0x2c32]        # 3ff8 <std::ios_base::Init::~Init()@GLIBCXX_3.4>
    13c6:	48 89 c7             	mov    rdi,rax
    13c9:	e8 f2 fc ff ff       	call   10c0 <__cxa_atexit@plt>
    13ce:	90                   	nop
    13cf:	c9                   	leave  
    13d0:	c3                   	ret    

00000000000013d1 <_GLOBAL__sub_I__Z10function_1v>:
    13d1:	f3 0f 1e fa          	endbr64 
    13d5:	55                   	push   rbp
    13d6:	48 89 e5             	mov    rbp,rsp
    13d9:	be ff ff 00 00       	mov    esi,0xffff
    13de:	bf 01 00 00 00       	mov    edi,0x1
    13e3:	e8 9c ff ff ff       	call   1384 <__static_initialization_and_destruction_0(int, int)>
    13e8:	5d                   	pop    rbp
    13e9:	c3                   	ret    

00000000000013ea <operator new(unsigned long, void*)>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
    13ea:	f3 0f 1e fa          	endbr64 
    13ee:	55                   	push   rbp
    13ef:	48 89 e5             	mov    rbp,rsp
    13f2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    13f6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    13fa:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    13fe:	5d                   	pop    rbp
    13ff:	c3                   	ret    

0000000000001400 <std::_Any_data::_M_access()>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
    1400:	f3 0f 1e fa          	endbr64 
    1404:	55                   	push   rbp
    1405:	48 89 e5             	mov    rbp,rsp
    1408:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    140c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1410:	5d                   	pop    rbp
    1411:	c3                   	ret    

0000000000001412 <std::_Any_data::_M_access() const>:
    const void* _M_access() const { return &_M_pod_data[0]; }
    1412:	f3 0f 1e fa          	endbr64 
    1416:	55                   	push   rbp
    1417:	48 89 e5             	mov    rbp,rsp
    141a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    141e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1422:	5d                   	pop    rbp
    1423:	c3                   	ret    

0000000000001424 <std::_Function_base::_Function_base()>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
    1424:	f3 0f 1e fa          	endbr64 
    1428:	55                   	push   rbp
    1429:	48 89 e5             	mov    rbp,rsp
    142c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1430:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1434:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
    143b:	00 
    143c:	90                   	nop
    143d:	5d                   	pop    rbp
    143e:	c3                   	ret    
    143f:	90                   	nop

0000000000001440 <std::_Function_base::~_Function_base()>:

    ~_Function_base()
    1440:	f3 0f 1e fa          	endbr64 
    1444:	55                   	push   rbp
    1445:	48 89 e5             	mov    rbp,rsp
    1448:	48 83 ec 10          	sub    rsp,0x10
    144c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    {
      if (_M_manager)
    1450:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1454:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
    1458:	48 85 c0             	test   rax,rax
    145b:	74 1e                	je     147b <std::_Function_base::~_Function_base()+0x3b>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    145d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1461:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
    1465:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
    1469:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    146d:	ba 03 00 00 00       	mov    edx,0x3
    1472:	48 89 ce             	mov    rsi,rcx
    1475:	48 89 c7             	mov    rdi,rax
    1478:	41 ff d0             	call   r8
    }
    147b:	90                   	nop
    147c:	c9                   	leave  
    147d:	c3                   	ret    

000000000000147e <std::_Function_base::_M_empty() const>:

    bool _M_empty() const { return !_M_manager; }
    147e:	f3 0f 1e fa          	endbr64 
    1482:	55                   	push   rbp
    1483:	48 89 e5             	mov    rbp,rsp
    1486:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    148a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    148e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
    1492:	48 85 c0             	test   rax,rax
    1495:	0f 94 c0             	sete   al
    1498:	5d                   	pop    rbp
    1499:	c3                   	ret    

000000000000149a <std::function<void ()>::~function()>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
    149a:	f3 0f 1e fa          	endbr64 
    149e:	55                   	push   rbp
    149f:	48 89 e5             	mov    rbp,rsp
    14a2:	48 83 ec 10          	sub    rsp,0x10
    14a6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    14aa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    14ae:	48 89 c7             	mov    rdi,rax
    14b1:	e8 8a ff ff ff       	call   1440 <std::_Function_base::~_Function_base()>
    14b6:	90                   	nop
    14b7:	c9                   	leave  
    14b8:	c3                   	ret    
    14b9:	90                   	nop

00000000000014ba <std::function<void ()>::function()>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
    14ba:	f3 0f 1e fa          	endbr64 
    14be:	55                   	push   rbp
    14bf:	48 89 e5             	mov    rbp,rsp
    14c2:	48 83 ec 10          	sub    rsp,0x10
    14c6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
      : _Function_base() { }
    14ca:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    14ce:	48 89 c7             	mov    rdi,rax
    14d1:	e8 4e ff ff ff       	call   1424 <std::_Function_base::_Function_base()>
    14d6:	90                   	nop
    14d7:	c9                   	leave  
    14d8:	c3                   	ret    
    14d9:	90                   	nop

00000000000014da <std::enable_if<std::function<void ()>::_Callable<std::decay<void (&)()>::type, std::__invoke_result<std::decay<void (&)()>::type&> >::value, std::function<void ()>&>::type std::function<void ()>::operator=<void (&)()>(void (&)())>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
    14da:	f3 0f 1e fa          	endbr64 
    14de:	55                   	push   rbp
    14df:	48 89 e5             	mov    rbp,rsp
    14e2:	48 83 ec 40          	sub    rsp,0x40
    14e6:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
    14ea:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
    14ee:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
    14f5:	00 00 
    14f7:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    14fb:	31 c0                	xor    eax,eax
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
    14fd:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    1501:	48 89 c7             	mov    rdi,rax
    1504:	e8 84 00 00 00       	call   158d <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>
    1509:	48 89 c2             	mov    rdx,rax
    150c:	48 8d 45 d0          	lea    rax,[rbp-0x30]
    1510:	48 89 d6             	mov    rsi,rdx
    1513:	48 89 c7             	mov    rdi,rax
    1516:	e8 85 00 00 00       	call   15a0 <std::function<void ()>::function<void (*)(), void, void>(void (*)())>
    151b:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
    151f:	48 8d 45 d0          	lea    rax,[rbp-0x30]
    1523:	48 89 d6             	mov    rsi,rdx
    1526:	48 89 c7             	mov    rdi,rax
    1529:	e8 08 01 00 00       	call   1636 <std::function<void ()>::swap(std::function<void ()>&)>
    152e:	48 8d 45 d0          	lea    rax,[rbp-0x30]
    1532:	48 89 c7             	mov    rdi,rax
    1535:	e8 60 ff ff ff       	call   149a <std::function<void ()>::~function()>
	  return *this;
    153a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
	}
    153e:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
    1542:	64 48 33 0c 25 28 00 	xor    rcx,QWORD PTR fs:0x28
    1549:	00 00 
    154b:	74 05                	je     1552 <std::enable_if<std::function<void ()>::_Callable<std::decay<void (&)()>::type, std::__invoke_result<std::decay<void (&)()>::type&> >::value, std::function<void ()>&>::type std::function<void ()>::operator=<void (&)()>(void (&)())+0x78>
    154d:	e8 8e fb ff ff       	call   10e0 <__stack_chk_fail@plt>
    1552:	c9                   	leave  
    1553:	c3                   	ret    

0000000000001554 <std::function<void ()>::operator()() const>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    1554:	f3 0f 1e fa          	endbr64 
    1558:	55                   	push   rbp
    1559:	48 89 e5             	mov    rbp,rsp
    155c:	48 83 ec 10          	sub    rsp,0x10
    1560:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
    1564:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1568:	48 89 c7             	mov    rdi,rax
    156b:	e8 0e ff ff ff       	call   147e <std::_Function_base::_M_empty() const>
    1570:	84 c0                	test   al,al
    1572:	74 05                	je     1579 <std::function<void ()>::operator()() const+0x25>
	__throw_bad_function_call();
    1574:	e8 37 fb ff ff       	call   10b0 <std::__throw_bad_function_call()@plt>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    1579:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    157d:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
    1581:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1585:	48 89 c7             	mov    rdi,rax
    1588:	ff d2                	call   rdx
    158a:	90                   	nop
    }
    158b:	c9                   	leave  
    158c:	c3                   	ret    

000000000000158d <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    158d:	f3 0f 1e fa          	endbr64 
    1591:	55                   	push   rbp
    1592:	48 89 e5             	mov    rbp,rsp
    1595:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    { return static_cast<_Tp&&>(__t); }
    1599:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    159d:	5d                   	pop    rbp
    159e:	c3                   	ret    
    159f:	90                   	nop

00000000000015a0 <std::function<void ()>::function<void (*)(), void, void>(void (*)())>:
      function<_Res(_ArgTypes...)>::
    15a0:	f3 0f 1e fa          	endbr64 
    15a4:	55                   	push   rbp
    15a5:	48 89 e5             	mov    rbp,rsp
    15a8:	53                   	push   rbx
    15a9:	48 83 ec 18          	sub    rsp,0x18
    15ad:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    15b1:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
      : _Function_base()
    15b5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    15b9:	48 89 c7             	mov    rdi,rax
    15bc:	e8 63 fe ff ff       	call   1424 <std::_Function_base::_Function_base()>
	if (_My_handler::_M_not_empty_function(__f))
    15c1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    15c5:	48 89 c7             	mov    rdi,rax
    15c8:	e8 c9 00 00 00       	call   1696 <bool std::_Function_base::_Base_manager<void (*)()>::_M_not_empty_function<void ()>(void (*)())>
    15cd:	84 c0                	test   al,al
    15cf:	74 5c                	je     162d <std::function<void ()>::function<void (*)(), void, void>(void (*)())+0x8d>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
    15d1:	48 8d 45 e0          	lea    rax,[rbp-0x20]
    15d5:	48 89 c7             	mov    rdi,rax
    15d8:	e8 cf 00 00 00       	call   16ac <std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())>
    15dd:	48 89 c2             	mov    rdx,rax
    15e0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    15e4:	48 89 d6             	mov    rsi,rdx
    15e7:	48 89 c7             	mov    rdi,rax
    15ea:	e8 cf 00 00 00       	call   16be <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)())>
	    _M_invoker = &_My_handler::_M_invoke;
    15ef:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    15f3:	48 8d 15 1c 01 00 00 	lea    rdx,[rip+0x11c]        # 1716 <std::_Function_handler<void (), void (*)()>::_M_invoke(std::_Any_data const&)>
    15fa:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
	    _M_manager = &_My_handler::_M_manager;
    15fe:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    1602:	48 8d 15 31 01 00 00 	lea    rdx,[rip+0x131]        # 173a <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>
    1609:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
      }
    160d:	eb 1e                	jmp    162d <std::function<void ()>::function<void (*)(), void, void>(void (*)())+0x8d>
    160f:	f3 0f 1e fa          	endbr64 
    1613:	48 89 c3             	mov    rbx,rax
      : _Function_base()
    1616:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    161a:	48 89 c7             	mov    rdi,rax
    161d:	e8 1e fe ff ff       	call   1440 <std::_Function_base::~_Function_base()>
    1622:	48 89 d8             	mov    rax,rbx
    1625:	48 89 c7             	mov    rdi,rax
    1628:	e8 e3 fa ff ff       	call   1110 <_Unwind_Resume@plt>
      }
    162d:	90                   	nop
    162e:	48 83 c4 18          	add    rsp,0x18
    1632:	5b                   	pop    rbx
    1633:	5d                   	pop    rbp
    1634:	c3                   	ret    
    1635:	90                   	nop

0000000000001636 <std::function<void ()>::swap(std::function<void ()>&)>:
      void swap(function& __x) noexcept
    1636:	f3 0f 1e fa          	endbr64 
    163a:	55                   	push   rbp
    163b:	48 89 e5             	mov    rbp,rsp
    163e:	48 83 ec 10          	sub    rsp,0x10
    1642:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1646:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
	std::swap(_M_functor, __x._M_functor);
    164a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    164e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1652:	48 89 d6             	mov    rsi,rdx
    1655:	48 89 c7             	mov    rdi,rax
    1658:	e8 b2 01 00 00       	call   180f <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&)>
	std::swap(_M_manager, __x._M_manager);
    165d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1661:	48 8d 50 10          	lea    rdx,[rax+0x10]
    1665:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1669:	48 83 c0 10          	add    rax,0x10
    166d:	48 89 d6             	mov    rsi,rdx
    1670:	48 89 c7             	mov    rdi,rax
    1673:	e8 3a 02 00 00       	call   18b2 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
	std::swap(_M_invoker, __x._M_invoker);
    1678:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    167c:	48 8d 50 18          	lea    rdx,[rax+0x18]
    1680:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1684:	48 83 c0 18          	add    rax,0x18
    1688:	48 89 d6             	mov    rsi,rdx
    168b:	48 89 c7             	mov    rdi,rax
    168e:	e8 aa 02 00 00       	call   193d <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<void (*)(std::_Any_data const&)> >, std::is_move_constructible<void (*)(std::_Any_data const&)>, std::is_move_assignable<void (*)(std::_Any_data const&)> >::value, void>::type std::swap<void (*)(std::_Any_data const&)>(void (*&)(std::_Any_data const&), void (*&)(std::_Any_data const&))>
      }
    1693:	90                   	nop
    1694:	c9                   	leave  
    1695:	c3                   	ret    

0000000000001696 <bool std::_Function_base::_Base_manager<void (*)()>::_M_not_empty_function<void ()>(void (*)())>:
	  _M_not_empty_function(_Tp* __fp)
    1696:	f3 0f 1e fa          	endbr64 
    169a:	55                   	push   rbp
    169b:	48 89 e5             	mov    rbp,rsp
    169e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
	  { return __fp != nullptr; }
    16a2:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
    16a7:	0f 95 c0             	setne  al
    16aa:	5d                   	pop    rbp
    16ab:	c3                   	ret    

00000000000016ac <std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    16ac:	f3 0f 1e fa          	endbr64 
    16b0:	55                   	push   rbp
    16b1:	48 89 e5             	mov    rbp,rsp
    16b4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    16b8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    16bc:	5d                   	pop    rbp
    16bd:	c3                   	ret    

00000000000016be <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)())>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
    16be:	f3 0f 1e fa          	endbr64 
    16c2:	55                   	push   rbp
    16c3:	48 89 e5             	mov    rbp,rsp
    16c6:	48 83 ec 20          	sub    rsp,0x20
    16ca:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    16ce:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    16d2:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
    16d9:	00 00 
    16db:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    16df:	31 c0                	xor    eax,eax
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
    16e1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    16e5:	48 89 c7             	mov    rdi,rax
    16e8:	e8 bf ff ff ff       	call   16ac <std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())>
    16ed:	48 89 c2             	mov    rdx,rax
    16f0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    16f4:	48 89 d6             	mov    rsi,rdx
    16f7:	48 89 c7             	mov    rdi,rax
    16fa:	e8 b7 02 00 00       	call   19b6 <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)(), std::integral_constant<bool, true>)>
    16ff:	90                   	nop
    1700:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1704:	64 48 33 04 25 28 00 	xor    rax,QWORD PTR fs:0x28
    170b:	00 00 
    170d:	74 05                	je     1714 <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)())+0x56>
    170f:	e8 cc f9 ff ff       	call   10e0 <__stack_chk_fail@plt>
    1714:	c9                   	leave  
    1715:	c3                   	ret    

0000000000001716 <std::_Function_handler<void (), void (*)()>::_M_invoke(std::_Any_data const&)>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    1716:	f3 0f 1e fa          	endbr64 
    171a:	55                   	push   rbp
    171b:	48 89 e5             	mov    rbp,rsp
    171e:	48 83 ec 10          	sub    rsp,0x10
    1722:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
	(*_Base::_M_get_pointer(__functor))(
    1726:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    172a:	48 89 c7             	mov    rdi,rax
    172d:	e8 cc 02 00 00       	call   19fe <std::_Function_base::_Base_manager<void (*)()>::_M_get_pointer(std::_Any_data const&)>
    1732:	48 8b 00             	mov    rax,QWORD PTR [rax]
    1735:	ff d0                	call   rax
      }
    1737:	90                   	nop
    1738:	c9                   	leave  
    1739:	c3                   	ret    

000000000000173a <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
    173a:	f3 0f 1e fa          	endbr64 
    173e:	55                   	push   rbp
    173f:	48 89 e5             	mov    rbp,rsp
    1742:	53                   	push   rbx
    1743:	48 83 ec 38          	sub    rsp,0x38
    1747:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    174b:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    174f:	89 55 cc             	mov    DWORD PTR [rbp-0x34],edx
    1752:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
    1759:	00 00 
    175b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    175f:	31 c0                	xor    eax,eax
	  switch (__op)
    1761:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    1764:	83 f8 03             	cmp    eax,0x3
    1767:	74 67                	je     17d0 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x96>
    1769:	83 f8 03             	cmp    eax,0x3
    176c:	7f 6f                	jg     17dd <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0xa3>
    176e:	83 f8 02             	cmp    eax,0x2
    1771:	74 48                	je     17bb <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x81>
    1773:	83 f8 02             	cmp    eax,0x2
    1776:	7f 65                	jg     17dd <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0xa3>
    1778:	85 c0                	test   eax,eax
    177a:	74 07                	je     1783 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x49>
    177c:	83 f8 01             	cmp    eax,0x1
    177f:	74 1a                	je     179b <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x61>
    1781:	eb 5a                	jmp    17dd <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0xa3>
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
    1783:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    1787:	48 89 c7             	mov    rdi,rax
    178a:	e8 9f 02 00 00       	call   1a2e <std::type_info const*& std::_Any_data::_M_access<std::type_info const*>()>
    178f:	48 8d 15 a2 25 00 00 	lea    rdx,[rip+0x25a2]        # 3d38 <vtable for __cxxabiv1::__pointer_type_info@CXXABI_1.3>
    1796:	48 89 10             	mov    QWORD PTR [rax],rdx
	      break;
    1799:	eb 42                	jmp    17dd <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0xa3>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
    179b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    179f:	48 89 c7             	mov    rdi,rax
    17a2:	e8 a5 02 00 00       	call   1a4c <void (**&std::_Any_data::_M_access<void (**)()>())()>
    17a7:	48 89 c3             	mov    rbx,rax
    17aa:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    17ae:	48 89 c7             	mov    rdi,rax
    17b1:	e8 48 02 00 00       	call   19fe <std::_Function_base::_Base_manager<void (*)()>::_M_get_pointer(std::_Any_data const&)>
    17b6:	48 89 03             	mov    QWORD PTR [rbx],rax
	      break;
    17b9:	eb 22                	jmp    17dd <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0xa3>
	      _M_clone(__dest, __source, _Local_storage());
    17bb:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
    17bf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    17c3:	48 89 d6             	mov    rsi,rdx
    17c6:	48 89 c7             	mov    rdi,rax
    17c9:	e8 9c 02 00 00       	call   1a6a <std::_Function_base::_Base_manager<void (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)>
	      break;
    17ce:	eb 0d                	jmp    17dd <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0xa3>
	      _M_destroy(__dest, _Local_storage());
    17d0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    17d4:	48 89 c7             	mov    rdi,rax
    17d7:	e8 d6 02 00 00       	call   1ab2 <std::_Function_base::_Base_manager<void (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>
	      break;
    17dc:	90                   	nop
	  return false;
    17dd:	b8 00 00 00 00       	mov    eax,0x0
	}
    17e2:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    17e6:	64 48 33 0c 25 28 00 	xor    rcx,QWORD PTR fs:0x28
    17ed:	00 00 
    17ef:	74 05                	je     17f6 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0xbc>
    17f1:	e8 ea f8 ff ff       	call   10e0 <__stack_chk_fail@plt>
    17f6:	48 83 c4 38          	add    rsp,0x38
    17fa:	5b                   	pop    rbx
    17fb:	5d                   	pop    rbp
    17fc:	c3                   	ret    

00000000000017fd <std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)>:
    move(_Tp&& __t) noexcept
    17fd:	f3 0f 1e fa          	endbr64 
    1801:	55                   	push   rbp
    1802:	48 89 e5             	mov    rbp,rsp
    1805:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    1809:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    180d:	5d                   	pop    rbp
    180e:	c3                   	ret    

000000000000180f <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&)>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
    180f:	f3 0f 1e fa          	endbr64 
    1813:	55                   	push   rbp
    1814:	48 89 e5             	mov    rbp,rsp
    1817:	48 83 ec 30          	sub    rsp,0x30
    181b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    181f:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    1823:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
    182a:	00 00 
    182c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    1830:	31 c0                	xor    eax,eax
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1832:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    1836:	48 89 c7             	mov    rdi,rax
    1839:	e8 bf ff ff ff       	call   17fd <std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)>
    183e:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
    1842:	48 8b 00             	mov    rax,QWORD PTR [rax]
    1845:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    1849:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
      __a = _GLIBCXX_MOVE(__b);
    184d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    1851:	48 89 c7             	mov    rdi,rax
    1854:	e8 a4 ff ff ff       	call   17fd <std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)>
    1859:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    185d:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
    1861:	48 8b 00             	mov    rax,QWORD PTR [rax]
    1864:	48 89 01             	mov    QWORD PTR [rcx],rax
    1867:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
      __b = _GLIBCXX_MOVE(__tmp);
    186b:	48 8d 45 e0          	lea    rax,[rbp-0x20]
    186f:	48 89 c7             	mov    rdi,rax
    1872:	e8 86 ff ff ff       	call   17fd <std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)>
    1877:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
    187b:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
    187f:	48 8b 00             	mov    rax,QWORD PTR [rax]
    1882:	48 89 01             	mov    QWORD PTR [rcx],rax
    1885:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
    }
    1889:	90                   	nop
    188a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    188e:	64 48 33 04 25 28 00 	xor    rax,QWORD PTR fs:0x28
    1895:	00 00 
    1897:	74 05                	je     189e <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&)+0x8f>
    1899:	e8 42 f8 ff ff       	call   10e0 <__stack_chk_fail@plt>
    189e:	c9                   	leave  
    189f:	c3                   	ret    

00000000000018a0 <std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>:
    move(_Tp&& __t) noexcept
    18a0:	f3 0f 1e fa          	endbr64 
    18a4:	55                   	push   rbp
    18a5:	48 89 e5             	mov    rbp,rsp
    18a8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    18ac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    18b0:	5d                   	pop    rbp
    18b1:	c3                   	ret    

00000000000018b2 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>:
    swap(_Tp& __a, _Tp& __b)
    18b2:	f3 0f 1e fa          	endbr64 
    18b6:	55                   	push   rbp
    18b7:	48 89 e5             	mov    rbp,rsp
    18ba:	48 83 ec 20          	sub    rsp,0x20
    18be:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    18c2:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    18c6:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
    18cd:	00 00 
    18cf:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    18d3:	31 c0                	xor    eax,eax
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    18d5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    18d9:	48 89 c7             	mov    rdi,rax
    18dc:	e8 bf ff ff ff       	call   18a0 <std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
    18e1:	48 8b 00             	mov    rax,QWORD PTR [rax]
    18e4:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
      __a = _GLIBCXX_MOVE(__b);
    18e8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    18ec:	48 89 c7             	mov    rdi,rax
    18ef:	e8 ac ff ff ff       	call   18a0 <std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
    18f4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
    18f7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    18fb:	48 89 10             	mov    QWORD PTR [rax],rdx
      __b = _GLIBCXX_MOVE(__tmp);
    18fe:	48 8d 45 f0          	lea    rax,[rbp-0x10]
    1902:	48 89 c7             	mov    rdi,rax
    1905:	e8 96 ff ff ff       	call   18a0 <std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
    190a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
    190d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    1911:	48 89 10             	mov    QWORD PTR [rax],rdx
    }
    1914:	90                   	nop
    1915:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1919:	64 48 33 04 25 28 00 	xor    rax,QWORD PTR fs:0x28
    1920:	00 00 
    1922:	74 05                	je     1929 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))+0x77>
    1924:	e8 b7 f7 ff ff       	call   10e0 <__stack_chk_fail@plt>
    1929:	c9                   	leave  
    192a:	c3                   	ret    

000000000000192b <std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))>:
    move(_Tp&& __t) noexcept
    192b:	f3 0f 1e fa          	endbr64 
    192f:	55                   	push   rbp
    1930:	48 89 e5             	mov    rbp,rsp
    1933:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    1937:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    193b:	5d                   	pop    rbp
    193c:	c3                   	ret    

000000000000193d <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<void (*)(std::_Any_data const&)> >, std::is_move_constructible<void (*)(std::_Any_data const&)>, std::is_move_assignable<void (*)(std::_Any_data const&)> >::value, void>::type std::swap<void (*)(std::_Any_data const&)>(void (*&)(std::_Any_data const&), void (*&)(std::_Any_data const&))>:
    swap(_Tp& __a, _Tp& __b)
    193d:	f3 0f 1e fa          	endbr64 
    1941:	55                   	push   rbp
    1942:	48 89 e5             	mov    rbp,rsp
    1945:	48 83 ec 20          	sub    rsp,0x20
    1949:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    194d:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    1951:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
    1958:	00 00 
    195a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    195e:	31 c0                	xor    eax,eax
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1960:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    1964:	48 89 c7             	mov    rdi,rax
    1967:	e8 bf ff ff ff       	call   192b <std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))>
    196c:	48 8b 00             	mov    rax,QWORD PTR [rax]
    196f:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
      __a = _GLIBCXX_MOVE(__b);
    1973:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    1977:	48 89 c7             	mov    rdi,rax
    197a:	e8 ac ff ff ff       	call   192b <std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))>
    197f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
    1982:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    1986:	48 89 10             	mov    QWORD PTR [rax],rdx
      __b = _GLIBCXX_MOVE(__tmp);
    1989:	48 8d 45 f0          	lea    rax,[rbp-0x10]
    198d:	48 89 c7             	mov    rdi,rax
    1990:	e8 96 ff ff ff       	call   192b <std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))>
    1995:	48 8b 10             	mov    rdx,QWORD PTR [rax]
    1998:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    199c:	48 89 10             	mov    QWORD PTR [rax],rdx
    }
    199f:	90                   	nop
    19a0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    19a4:	64 48 33 04 25 28 00 	xor    rax,QWORD PTR fs:0x28
    19ab:	00 00 
    19ad:	74 05                	je     19b4 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<void (*)(std::_Any_data const&)> >, std::is_move_constructible<void (*)(std::_Any_data const&)>, std::is_move_assignable<void (*)(std::_Any_data const&)> >::value, void>::type std::swap<void (*)(std::_Any_data const&)>(void (*&)(std::_Any_data const&), void (*&)(std::_Any_data const&))+0x77>
    19af:	e8 2c f7 ff ff       	call   10e0 <__stack_chk_fail@plt>
    19b4:	c9                   	leave  
    19b5:	c3                   	ret    

00000000000019b6 <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)(), std::integral_constant<bool, true>)>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
    19b6:	f3 0f 1e fa          	endbr64 
    19ba:	55                   	push   rbp
    19bb:	48 89 e5             	mov    rbp,rsp
    19be:	53                   	push   rbx
    19bf:	48 83 ec 18          	sub    rsp,0x18
    19c3:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    19c7:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
    19cb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    19cf:	48 89 c7             	mov    rdi,rax
    19d2:	e8 d5 fc ff ff       	call   16ac <std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())>
    19d7:	48 8b 18             	mov    rbx,QWORD PTR [rax]
    19da:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    19de:	48 89 c7             	mov    rdi,rax
    19e1:	e8 1a fa ff ff       	call   1400 <std::_Any_data::_M_access()>
    19e6:	48 89 c6             	mov    rsi,rax
    19e9:	bf 08 00 00 00       	mov    edi,0x8
    19ee:	e8 f7 f9 ff ff       	call   13ea <operator new(unsigned long, void*)>
    19f3:	48 89 18             	mov    QWORD PTR [rax],rbx
    19f6:	90                   	nop
    19f7:	48 83 c4 18          	add    rsp,0x18
    19fb:	5b                   	pop    rbx
    19fc:	5d                   	pop    rbp
    19fd:	c3                   	ret    

00000000000019fe <std::_Function_base::_Base_manager<void (*)()>::_M_get_pointer(std::_Any_data const&)>:
	_M_get_pointer(const _Any_data& __source)
    19fe:	f3 0f 1e fa          	endbr64 
    1a02:	55                   	push   rbp
    1a03:	48 89 e5             	mov    rbp,rsp
    1a06:	48 83 ec 20          	sub    rsp,0x20
    1a0a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
	      const _Functor& __f = __source._M_access<_Functor>();
    1a0e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    1a12:	48 89 c7             	mov    rdi,rax
    1a15:	e8 b8 00 00 00       	call   1ad2 <void (* const&std::_Any_data::_M_access<void (*)()>() const)()>
    1a1a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
	      return const_cast<_Functor*>(std::__addressof(__f));
    1a1e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1a22:	48 89 c7             	mov    rdi,rax
    1a25:	e8 c6 00 00 00       	call   1af0 <void (* const*std::__addressof<void (* const)()>(void (* const&)()))()>
    1a2a:	90                   	nop
	}
    1a2b:	c9                   	leave  
    1a2c:	c3                   	ret    
    1a2d:	90                   	nop

0000000000001a2e <std::type_info const*& std::_Any_data::_M_access<std::type_info const*>()>:
      _M_access()
    1a2e:	f3 0f 1e fa          	endbr64 
    1a32:	55                   	push   rbp
    1a33:	48 89 e5             	mov    rbp,rsp
    1a36:	48 83 ec 10          	sub    rsp,0x10
    1a3a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
      { return *static_cast<_Tp*>(_M_access()); }
    1a3e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1a42:	48 89 c7             	mov    rdi,rax
    1a45:	e8 b6 f9 ff ff       	call   1400 <std::_Any_data::_M_access()>
    1a4a:	c9                   	leave  
    1a4b:	c3                   	ret    

0000000000001a4c <void (**&std::_Any_data::_M_access<void (**)()>())()>:
      _M_access()
    1a4c:	f3 0f 1e fa          	endbr64 
    1a50:	55                   	push   rbp
    1a51:	48 89 e5             	mov    rbp,rsp
    1a54:	48 83 ec 10          	sub    rsp,0x10
    1a58:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
      { return *static_cast<_Tp*>(_M_access()); }
    1a5c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1a60:	48 89 c7             	mov    rdi,rax
    1a63:	e8 98 f9 ff ff       	call   1400 <std::_Any_data::_M_access()>
    1a68:	c9                   	leave  
    1a69:	c3                   	ret    

0000000000001a6a <std::_Function_base::_Base_manager<void (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
    1a6a:	f3 0f 1e fa          	endbr64 
    1a6e:	55                   	push   rbp
    1a6f:	48 89 e5             	mov    rbp,rsp
    1a72:	53                   	push   rbx
    1a73:	48 83 ec 18          	sub    rsp,0x18
    1a77:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    1a7b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
    1a7f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    1a83:	48 89 c7             	mov    rdi,rax
    1a86:	e8 47 00 00 00       	call   1ad2 <void (* const&std::_Any_data::_M_access<void (*)()>() const)()>
    1a8b:	48 8b 18             	mov    rbx,QWORD PTR [rax]
    1a8e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    1a92:	48 89 c7             	mov    rdi,rax
    1a95:	e8 66 f9 ff ff       	call   1400 <std::_Any_data::_M_access()>
    1a9a:	48 89 c6             	mov    rsi,rax
    1a9d:	bf 08 00 00 00       	mov    edi,0x8
    1aa2:	e8 43 f9 ff ff       	call   13ea <operator new(unsigned long, void*)>
    1aa7:	48 89 18             	mov    QWORD PTR [rax],rbx
	}
    1aaa:	90                   	nop
    1aab:	48 83 c4 18          	add    rsp,0x18
    1aaf:	5b                   	pop    rbx
    1ab0:	5d                   	pop    rbp
    1ab1:	c3                   	ret    

0000000000001ab2 <std::_Function_base::_Base_manager<void (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>:
	_M_destroy(_Any_data& __victim, true_type)
    1ab2:	f3 0f 1e fa          	endbr64 
    1ab6:	55                   	push   rbp
    1ab7:	48 89 e5             	mov    rbp,rsp
    1aba:	48 83 ec 10          	sub    rsp,0x10
    1abe:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
	  __victim._M_access<_Functor>().~_Functor();
    1ac2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1ac6:	48 89 c7             	mov    rdi,rax
    1ac9:	e8 34 00 00 00       	call   1b02 <void (*&std::_Any_data::_M_access<void (*)()>())()>
	}
    1ace:	90                   	nop
    1acf:	c9                   	leave  
    1ad0:	c3                   	ret    
    1ad1:	90                   	nop

0000000000001ad2 <void (* const&std::_Any_data::_M_access<void (*)()>() const)()>:
      _M_access() const
    1ad2:	f3 0f 1e fa          	endbr64 
    1ad6:	55                   	push   rbp
    1ad7:	48 89 e5             	mov    rbp,rsp
    1ada:	48 83 ec 10          	sub    rsp,0x10
    1ade:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
      { return *static_cast<const _Tp*>(_M_access()); }
    1ae2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1ae6:	48 89 c7             	mov    rdi,rax
    1ae9:	e8 24 f9 ff ff       	call   1412 <std::_Any_data::_M_access() const>
    1aee:	c9                   	leave  
    1aef:	c3                   	ret    

0000000000001af0 <void (* const*std::__addressof<void (* const)()>(void (* const&)()))()>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    1af0:	f3 0f 1e fa          	endbr64 
    1af4:	55                   	push   rbp
    1af5:	48 89 e5             	mov    rbp,rsp
    1af8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    { return __builtin_addressof(__r); }
    1afc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1b00:	5d                   	pop    rbp
    1b01:	c3                   	ret    

0000000000001b02 <void (*&std::_Any_data::_M_access<void (*)()>())()>:
      _M_access()
    1b02:	f3 0f 1e fa          	endbr64 
    1b06:	55                   	push   rbp
    1b07:	48 89 e5             	mov    rbp,rsp
    1b0a:	48 83 ec 10          	sub    rsp,0x10
    1b0e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
      { return *static_cast<_Tp*>(_M_access()); }
    1b12:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1b16:	48 89 c7             	mov    rdi,rax
    1b19:	e8 e2 f8 ff ff       	call   1400 <std::_Any_data::_M_access()>
    1b1e:	c9                   	leave  
    1b1f:	c3                   	ret    

0000000000001b20 <__libc_csu_init>:
    1b20:	f3 0f 1e fa          	endbr64 
    1b24:	41 57                	push   r15
    1b26:	4c 8d 3d f3 21 00 00 	lea    r15,[rip+0x21f3]        # 3d20 <__frame_dummy_init_array_entry>
    1b2d:	41 56                	push   r14
    1b2f:	49 89 d6             	mov    r14,rdx
    1b32:	41 55                	push   r13
    1b34:	49 89 f5             	mov    r13,rsi
    1b37:	41 54                	push   r12
    1b39:	41 89 fc             	mov    r12d,edi
    1b3c:	55                   	push   rbp
    1b3d:	48 8d 2d ec 21 00 00 	lea    rbp,[rip+0x21ec]        # 3d30 <__do_global_dtors_aux_fini_array_entry>
    1b44:	53                   	push   rbx
    1b45:	4c 29 fd             	sub    rbp,r15
    1b48:	48 83 ec 08          	sub    rsp,0x8
    1b4c:	e8 af f4 ff ff       	call   1000 <_init>
    1b51:	48 c1 fd 03          	sar    rbp,0x3
    1b55:	74 1f                	je     1b76 <__libc_csu_init+0x56>
    1b57:	31 db                	xor    ebx,ebx
    1b59:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    1b60:	4c 89 f2             	mov    rdx,r14
    1b63:	4c 89 ee             	mov    rsi,r13
    1b66:	44 89 e7             	mov    edi,r12d
    1b69:	41 ff 14 df          	call   QWORD PTR [r15+rbx*8]
    1b6d:	48 83 c3 01          	add    rbx,0x1
    1b71:	48 39 dd             	cmp    rbp,rbx
    1b74:	75 ea                	jne    1b60 <__libc_csu_init+0x40>
    1b76:	48 83 c4 08          	add    rsp,0x8
    1b7a:	5b                   	pop    rbx
    1b7b:	5d                   	pop    rbp
    1b7c:	41 5c                	pop    r12
    1b7e:	41 5d                	pop    r13
    1b80:	41 5e                	pop    r14
    1b82:	41 5f                	pop    r15
    1b84:	c3                   	ret    
    1b85:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    1b8c:	00 00 00 00 

0000000000001b90 <__libc_csu_fini>:
    1b90:	f3 0f 1e fa          	endbr64 
    1b94:	c3                   	ret    

Disassembly of section .fini:

0000000000001b98 <_fini>:
    1b98:	f3 0f 1e fa          	endbr64 
    1b9c:	48 83 ec 08          	sub    rsp,0x8
    1ba0:	48 83 c4 08          	add    rsp,0x8
    1ba4:	c3                   	ret    
