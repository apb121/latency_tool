apb121@vertex53:latency_tool$ ./latency_tool -t=200 -l=1 -r=5 class_parser.hpp cache_info.hpp binary_analyser.hpp user_options.hpp latency_tool

===========================================================

Reading cache data from your system...

The critical stride of the L1d cache is 4096 bytes.
The critical stride of the L1i cache is 4096 bytes.
The critical stride of the L2 cache is 65536 bytes.
The critical stride of the L3 cache is 786432 bytes.
This processor does not have an L4 cache


===========================================================

Analysing your source code...


=== An inefficient data member ordering has been detected in file "class_parser.hpp" ===

Typename: G

Current ordering:

type: char ; name: c; size: 1; 
type: double ; name: d; size: 8; 
type: int ; name: i; size: 4; 
type: short ; name: s; size: 2; 

Current size: 24

Proposed ordering:

type: char ; name: c; size: 1; 
type: short ; name: s; size: 2; 
type: int ; name: i; size: 4; 
type: double ; name: d; size: 8; 

New size: 16

This ordering saves 8 bytes.

No inefficiently ordered data members have been detected in the file "cache_info.hpp"
No inefficiently ordered data members have been detected in the file "binary_analyser.hpp"
No inefficiently ordered data members have been detected in the file "user_options.hpp"


===========================================================

Analysing your binary........

The following groups of functions have been identified as a potential source of latency problems.
They have been ranked based on a combination of the number of functions in the group and the amount of cache space they compete for.
This has been calculated based on the instruction-cache's critical stride of 4096 bytes and associativity of 8, as well as the chosen coexecution indirection level of 1 and competition overlap threshold of 200 bytes.

===Group===

main
UserOptions::parse_flags(int, char**)
get_type_size(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
UDType::detect_variables()
UDType::calculate_size(std::vector<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >)
File::suggest_optimised_orderings()
Binary::get_functions(UserOptions&)
Binary::populate_coexecution_vectors(UserOptions&)
Binary::find_problem_function_groups(UserOptions&)

This group of 9 coexecuting functions competes for the same 983-byte region of the cache

===Group===

main
UserOptions::parse_flags(int, char**)
get_type_size(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
UDType::detect_variables()
File::suggest_optimised_orderings()
Binary::get_functions(UserOptions&)
Binary::populate_coexecution_vectors(UserOptions&)
Binary::find_problem_function_groups(UserOptions&)

This group of 8 coexecuting functions competes for the same 1466-byte region of the cache

===Group===

main
UserOptions::parse_flags(int, char**)
get_type_size(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
UDType::detect_variables()
UDType::calculate_size()
File::detect_types()
Binary::get_functions(UserOptions&)
Binary::populate_coexecution_vectors(UserOptions&)
Binary::find_problem_function_groups(UserOptions&)

This group of 9 coexecuting functions competes for the same 500-byte region of the cache

===Group===

UserOptions::parse_flags(int, char**)
get_type_size(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
UDType::detect_variables()
UDType::calculate_size(std::vector<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >)
File::suggest_optimised_orderings()
Binary::get_functions(UserOptions&)
Binary::populate_coexecution_vectors(UserOptions&)
Binary::find_problem_function_groups(UserOptions&)

This group of 8 coexecuting functions competes for the same 983-byte region of the cache

===Group===

main
get_type_size(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
UDType::detect_variables()
UDType::calculate_size(std::vector<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >)
File::suggest_optimised_orderings()
Binary::get_functions(UserOptions&)
Binary::populate_coexecution_vectors(UserOptions&)
Binary::find_problem_function_groups(UserOptions&)

This group of 8 coexecuting functions competes for the same 983-byte region of the cache